# Import necessary libraries and modules
from faker import Faker 
import pandas as pd
from datetime import datetime, timedelta
import random
import numpy as np
import pycountry
from pycountry_convert import country_alpha2_to_continent_code, country_name_to_country_alpha2

# Initialize Faker for generating fake data
fk = Faker()

# Set seeds for random number generators to ensure reproducibility
# Faker.seed(1234)
# random.seed(1234)
# np.random.seed(1234)

# Global values for the dataset
# Example usage:
# Get user input for continents and weights
user_input_continents = input("Enter continents (comma-separated, use the appropriate continent codes (AF, AS, EU, NA, OC, SA)): ").replace(" ", "").upper().split(',')
user_input_weights = [float(weight) for weight in input("Enter weights (comma-separated, these are used to determine how often your choices get picked, must add up to 1): ").split(',')]

# user_input_continents = ['NA','EU','AS']
# user_input_weights = [0.3,0.5,0.2]

num_rows = int(input("Enter the number of Rows you want to generate: "))
lower_bound = int(input("Enter the lower bound for your random visits to the website: "))
upper_bound = int(input("Enter the upper bound for your random visit to the website: "))

# Date values for the dataset
start_date = datetime(2023, 1, 1)
end_date = datetime(2024, 1, 1)


#Setting up null data

num_nulls = int(0.3*num_rows)

#generating null indices randomly

null_indices = np.random.choice(num_rows, num_nulls, replace=False)
# creating the dataset
company_names = [fk.company() if i not in null_indices else None for i in range(num_rows)]


# Function to generate a random visitor ID
def generate_random_visitor_id():
    return fk.unique.numerify('##############')

# Function to generate a random visit ID
def generate_random_visit_id():
    return fk.unique.numerify('##########')

# Function to generate a random date within a given range
def generate_random_date(start_date, end_date):
    return fk.date_between_dates(date_start=start_date, date_end=end_date)

# Function to generate a random time
def generate_random_time():
    return fk.time(pattern="%H:%M:%S", end_datetime=None)

# Function to generate random visit numbers with a skew factor
def generate_random_visit_number(size, lower_bound, upper_bound, skew_factor=1.6):
    values = list(range(lower_bound, upper_bound+1))
    weights = [1/(i ** skew_factor) for i in range(1, len(values)+1)]
    return random.choices(values, weights=weights, k=size)

# Function to generate random hits numbers based on row-level visits
def generate_random_hits_number(row):
    max_visits = int(row['Visits'])
    return random.randint(max_visits+1, max_visits*2)

# Function to generate random page views based on row-level hits
def generate_random_page_views(row):
    max_hits = row['Hits']
    if 10 <= max_hits < 20:
        return np.random.randint(2, 11)
    elif max_hits >= 20:
        return np.random.randint(4, 15)
    elif max_hits <= 10:
        return 1
    else:
        return np.random.randint(1, max(2, (max_hits // 2)) + 1)

# Function to generate random time on site following a normal distribution
def generate_random_timeonsite():
    mean = 75
    std_dev = 50
    value = np.random.normal(loc=mean, scale=std_dev)
    return round(max(15, min(value, 500)))

# Function to generate random event button clicks based on row-level leftover hits
def generate_random_event_buttonclick(row):
    left_over_hits = row['Left Over Hits']
    if left_over_hits == 1:
        return 1
    elif 1 < left_over_hits < 10:
        return np.random.randint(2, left_over_hits + 1)
    else: 
        return np.random.randint(10,max(11, left_over_hits + 1))

def generate_random_website():
    mediums = ['fakepage.co.uk/main','fakepage.co.uk/aboutus','fakepage.co.uk/products','fakepage.co.uk/boom']
    weights = [0.5,0.1,0.3,0.1] 
    return np.random.choice(mediums, p=weights)


def generate_random_useridentification(row):
    row_level = row['Visits']
    
    if row_level == 1:
        return 'IP Address'
    else:
        medium = ['Known Visitior', 'Marketo']
        weights = [0.8,0.2]
        return np.random.choice(medium, p=weights)

# Function to generate random channel groups based on predefined mediums and weights
def generate_random_channel_group():
    mediums = ['Paid Search', 'Organic Search', 'Direct', 'Email', 'Organic Social', 'Referral']
    weights = [0.4, 0.2, 0.2, 0.1, 0.05, 0.05] 
    return np.random.choice(mediums, p=weights)



# Function to generate a random medium based on row-level channel group
def generate_random_medium(row):
    # Extract the channel group for the given row
    row_level_channel = row['Channel Group']

    # Define a dictionary with medium options and their corresponding weights
    channel_mediums = {
        'Paid Search': {'Google': 0.8, 'Bing': 0.2},
        'Organic Search': {'Google': 0.8, 'Bing': 0.2},
        'Direct': {'None': 1.0},
        'Email': {'Newsletter': 0.5, 'Promo-Campaign': 0.25, 'Targeted Ad': 0.25},
        'Organic Social': {'Facebook': 0.25, 'Twitter': 0.25, 'LinkedIn': 0.25, 'Instagram': 0.25},
        'Referral': {'Otherwebsite_placeholder': 0.5, 'Partner-site': 0.5},
        'Others' : {'Not Identified Channel Medium'}
    }

    # Retrieve medium options for the given channel group, default to 'Others' if not found
    medium_options = channel_mediums.get(row_level_channel, channel_mediums['Others'])
    mediums, weights = zip(*medium_options.items())

    # Choose a random medium based on weights
    return np.random.choice(mediums, p=weights)


def generate_random_downloads(row):
    row_level = row['Left Over Hits']
    
    if row_level != 0:
        return  np.random.randint(1,max(2,min(4,row_level + 1)))
    else:
        return 0
    
    
def generate_random_videoviews(row):
    row_level = row['Left Over Hits']
    
    if row_level != 0:
        return  np.random.randint(1,max(2,min(5,row_level + 1)))
    else:
        return 0


# Function to generate a random continent code based on user-provided continents and weights
def generate_random_continent_code(continents, weights):
    # Normalize weights to ensure they sum to 1
    weights  = np.array(weights)
    weights /= weights.sum()
    
    # Convert user-provided continents to uppercase
    user_input = [continent.upper() for continent in continents]
    
    # Choose a random continent based on user input and weights
    chosen_continent = np.random.choice(user_input, p=weights)
    
    return chosen_continent

# Function to get a dictionary of countries grouped by continents
def get_countries_by_continents(continents):
    countries_by_continent = {continent: [] for continent in continents}

    # Iterate through all countries and group them by continent
    for country in pycountry.countries:
        try:
            country_alpha2 = country_name_to_country_alpha2(country.name)
            continent_code = country_alpha2_to_continent_code(country_alpha2)
            
            # Adjust for the discrepancy in continent codes
            if continent_code in continents or continent_code[:-1] in continents:
                countries_by_continent[continent_code].append(country.name)
        except KeyError:
            pass

    return countries_by_continent


# Use the functions to generate random medium, continent code, and countries by continent
selected_continents = user_input_continents
random_continent = generate_random_continent_code(selected_continents, user_input_weights)
countries_by_continent = get_countries_by_continents(selected_continents)


#-------------------------------------------------------------------------------------

# Generating channel_groups separately
channel_groups = [generate_random_channel_group() for _ in range(num_rows)]

# Generating continent names separately
continent_names = [generate_random_continent_code(user_input_continents, user_input_weights) for _ in range(num_rows)]

# Generating visit IDs separately
visit_ids = [generate_random_visit_id() for _ in range(num_rows)]

# Generating visitor IDs separately
visitor_ids = [generate_random_visitor_id() for _ in range(num_rows)]

# Generating visit dates separately
visit_dates = [generate_random_date(start_date, end_date) for _ in range(num_rows)]

# Generating visit start times separately
visit_start_times = [generate_random_time() for _ in range(num_rows)]

# Generating time on site separately
time_on_site = [generate_random_timeonsite() for _ in range(num_rows)]

#Generating websites separately
pages = [generate_random_website() for _ in range(num_rows)]

#-------------------------------------------------------------------------------------
# Constructing the DataFrame
data = {
    'Company Name': company_names,
    'Continent': continent_names,
    'Visit ID': visit_ids,
    'Visitor ID': visitor_ids,
    'Visit Date': visit_dates,
    'Visit Start Time': visit_start_times,
    'Time on Site': time_on_site,
    'Channel Group': channel_groups,
    'Web Pages' : pages
}
df = pd.DataFrame(data)

#-------------------------------------------------------------------------------------
# Generate random visit numbers based on specified parameters
df['Visits'] = generate_random_visit_number(num_rows, lower_bound, upper_bound)

# Generate random hits numbers for each row based on the generated visit numbers
df['Hits'] = df.apply(generate_random_hits_number, axis=1)

# Generate random page views for each row based on the generated hits numbers
df['Page Views'] = df.apply(generate_random_page_views, axis=1)

# Generate random channel medium for each row based on the row-level channel group
df['Channel Medium'] = df.apply(generate_random_medium, axis=1)

df['User Identification'] = df.apply(generate_random_useridentification,axis = 1)

# Calculate the left-over hits by subtracting page views from hits
df['Left Over Hits'] = df['Hits'] - df['Page Views']

# Generate random event button clicks for each row based on the left-over hits
df['Event_buttonclick'] = df.apply(generate_random_event_buttonclick, axis=1)

# Adjust left-over hits by subtracting event button clicks
df['Left Over Hits'] = df['Left Over Hits'] - df['Event_buttonclick']

# Generating downloads based on leftover hits
df['Downloads'] = df.apply(generate_random_downloads, axis =1)

#Adjusting Leftover Hits
df['Left Over Hits'] = df['Left Over Hits'] - df['Downloads']

#Generating Video views based on leftover hits

df['Video Views'] = df.apply(generate_random_videoviews,axis=1)


#Adjusting leftover hits
df['Left Over Hits'] = df['Left Over Hits'] - df ['Video Views']


#-------------------------------------------------------------------------------------

# Assign countries to each row based on the generated continent codes
df['Country'] = df['Continent'].apply(lambda x: random.choice(countries_by_continent.get(x, [])) if countries_by_continent.get(x) else None)



# df.drop(columns=['Visit Date', 'Visit Start Time','Time on Site', 'Channel Medium','Channel Group','Continent','User Identification','Country'],inplace = True)
# df.drop(columns=['Visit ID', 'Visitor ID', 'Visit Date', 'Visit Start Time','Time on Site', 'Visits', 'Hits','Page Views','Channel Medium','Left Over Hits', 'Event_buttonclick','Channel Group'],inplace = True)
# df = df.iloc[:, [0,1,18,2,3,7,12,13,4,5,9,10,11,15,16,17,8]]
print(df)
print('---------')

df.to_csv(r"C:\Users\algir\Desktop\Hello\output.csv")
# Hit - A hit is any request to a web server. 
# Each time a visitor downloads a page, clicks a hyperlink, views a graphic, or performs any other action on a web site, a call is made to the web server. 
# The web server records each of these requests in a log file.